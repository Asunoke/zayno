// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  firstName     String?
  lastName      String?
  password      String?   // Ajout du champ password manquant
  
  // BCB specific fields
  bcbId         String    @unique @default("") // BCB000001 format
  iban          String    @unique @default("") // ML34 BCB1 0001234567 format
  balance       Decimal   @default(0) @db.Decimal(15, 2)
  creditScore   Int       @default(0)
  tier          CreditTier @default(BOIS)
  hasCard       Boolean   @default(false)
  cardNumber    String?   @unique
  cardExpiry    String?
  isActive      Boolean   @default(true)
  isAdmin       Boolean   @default(false)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  // Transactions
  sentTransactions     Transaction[] @relation("SenderTransactions")
  receivedTransactions Transaction[] @relation("ReceiverTransactions")
  
  // Deposits & Withdrawals
  deposits      Deposit[]
  withdrawals   Withdrawal[]
  
  // Loans
  loans         Loan[]
  
  // Messages
  sentMessages     Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CreditTier {
  BOIS
  BRONZE
  FER
  CUIVRE
  OR
  PLATINE
}

enum TransactionType {
  TRANSFER
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  CARD_PURCHASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id          String            @id @default(cuid())
  amount      Decimal           @db.Decimal(15, 2)
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String            @unique
  
  senderId    String?
  receiverId  String?
  sender      User?             @relation("SenderTransactions", fields: [senderId], references: [id])
  receiver    User?             @relation("ReceiverTransactions", fields: [receiverId], references: [id])
  
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  @@map("transactions")
}

enum DepositStatus {
  PENDING
  CONFIRMED
  REJECTED
  EXPIRED
}

model Deposit {
  id            String        @id @default(cuid())
  userId        String
  amount        Decimal       @db.Decimal(15, 2)
  paymentMethod String        // ORANGE_MONEY, MOOV_MONEY, BANK_TRANSFER
  phoneNumber   String        // Num√©ro pour le paiement
  status        DepositStatus @default(PENDING)
  expiresAt     DateTime      // 50 minutes timer
  adminNote     String?
  
  user          User          @relation(fields: [userId], references: [id])
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("deposits")
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Withdrawal {
  id            String           @id @default(cuid())
  userId        String
  amount        Decimal          @db.Decimal(15, 2)
  method        String           // AGENT, BANK_TRANSFER, MOBILE_MONEY
  destination   String           // Agent location or account details
  status        WithdrawalStatus @default(PENDING)
  adminNote     String?
  
  user          User             @relation(fields: [userId], references: [id])
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("withdrawals")
}

enum LoanStatus {
  PENDING
  APPROVED
  ACTIVE
  COMPLETED
  DEFAULTED
}

model Loan {
  id              String     @id @default(cuid())
  userId          String
  amount          Decimal    @db.Decimal(15, 2)
  interestRate    Decimal    @db.Decimal(5, 2) // Percentage
  duration        Int        // Duration in months
  monthlyPayment  Decimal    @db.Decimal(15, 2)
  remainingAmount Decimal    @db.Decimal(15, 2)
  blockedAmount   Decimal    @db.Decimal(15, 2) // Lombard system - blocked funds
  status          LoanStatus @default(PENDING)
  
  user            User       @relation(fields: [userId], references: [id])
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@map("loans")
}

model Message {
  id         String   @id @default(cuid())
  content    String   @db.Text
  senderId   String
  receiverId String
  isRead     Boolean  @default(false)
  
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("messages")
}

model SystemSettings {
  id    String @id @default(cuid())
  key   String @unique
  value String
  
  @@map("system_settings")
}
